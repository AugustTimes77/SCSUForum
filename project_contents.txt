.
├── app.js
├── config
│   └── database.js
├── controllers
│   ├── handlers
│   │   ├── deleteHandlers.js
│   │   ├── getHandlers.js
│   │   ├── index.js
│   │   ├── postHandlers.js
│   │   └── putHandlers.js
│   └── requestController.js
├── favicon.ico
├── .gitignore
├── models
│   ├── Forum.js
│   ├── message.js
│   └── User.js
├── package.json
├── package-lock.json
├── project_contents.txt
├── public
│   ├── css
│   │   └── styles.css
│   └── js
│       ├── api.js
│       └── main.js
├── README.md
├── server.js
├── services
│   ├── authServices.js
│   └── templateService.js
├── to-do.txt
├── utils
│   ├── mimeTypes.js
│   ├── pathHandler.js
│   └── responseHandler.js
└── views
    ├── pages
    │   ├── 404.html
    │   ├── account.html
    │   ├── forums.html
    │   ├── index.html
    │   ├── login.html
    │   └── messages.html
    ├── partials
    │   ├── footer.html
    │   └── header.html
    └── templates
        └── forumTemplate.html

14 directories, 36 files
=== FILE CONTENTS ===
=== ./.gitignore ===

node_modules/
=== ./app.js ===

/**
 * app.js
 * Application setup and configuration. Exports the main request handler.
 */

const { handleRequest } = require('./controllers/requestController');

// Error handling wrapper for all requests
async function applicationHandler(req, res) {
    try {
        await handleRequest(req, res);
    } catch (error) {
        console.error('Unhandled error:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Internal Server Error' }));
    }
}

module.exports = applicationHandler;
=== ./config/database.js ===

/**
 * config/database.js
 * Database configuration and connection pool setup.
 */

const mysql = require('mysql2');

const dbConfig = {
    host: 'localhost',
    user: 'root',
    database: 'scsuforum',
    connectionLimit: 10
};

// Create the connection pool
const pool = mysql.createPool(dbConfig);

// Test the connection
pool.getConnection((err, connection) => {
    if (err) {
        console.error('Database connection failed:', err);
        return;
    }
    console.log('Database connected successfully');
    connection.release();
});

// Export promisified pool for async/await usage
module.exports = {
    pool: pool.promise()
};
=== ./controllers/handlers/deleteHandlers.js ===


=== ./controllers/handlers/getHandlers.js ===

/**
 * controllers/handlers/getHandlers.js
 * Handles all GET requests
 */

const path = require('path');
const fs = require('fs').promises;
const mimeTypes = require('../../utils/mimeTypes');
const templateService = require('../../services/templateService');
const User = require('../../models/User');
const Forum = require('../../models/Forum');

const getHandlers = {
    async handleStaticFile(req, res) {
        try {
            // Handle favicon.ico request
            if (req.url === '/favicon.ico') {
                res.writeHead(204); // No content
                res.end();
                return;
            }

            const filePath = path.join(__dirname, '../../public', req.url);
            const extname = path.extname(filePath).toLowerCase();
            const contentType = mimeTypes[extname] || 'application/octet-stream';

            const content = await fs.readFile(filePath);
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(content);
        } catch (error) {
            res.writeHead(404);
            res.end('File not found');
        }
    },

    async handlePartial(req, res) {
        try {
            const requestedPath = req.url.split('/partial/')[1];
            console.log('Loading partial/template:', requestedPath);
            
            let content;
            // Check if it's a forum template request
            if (requestedPath === 'forumTemplate') {
                content = await fs.readFile(path.join(__dirname, '../../views/templates/forumTemplate.html'), 'utf8');
            } else {
                // Handle regular partials
                content = await fs.readFile(path.join(__dirname, '../../views/partials', `${requestedPath}.html`), 'utf8');
            }
            
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(content);
        } catch (err) {
            console.error('Error loading partial/template:', err);
            res.writeHead(404);
            res.end('Partial or template not found');
        }
    },

    async handlePage(req, res) {
        try {
            let pageName = req.url === '/' ? 'index' : req.url.match(/^\/([^/]+)/)[1];
            let pageContent;

            if (pageName === 'index') {
                pageContent = await fs.readFile(path.join(__dirname, '../../views/pages/index.html'), 'utf8');
            } else {
                const template = templateService.getTemplateHTML();
                const content = await templateService.readPageContent(pageName);
                pageContent = template.replace('{{content}}', content);
            }

            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(pageContent);
        } catch (error) {
            const notFoundContent = await fs.readFile(path.join(__dirname, '../../views/pages/404.html'), 'utf8');
            res.writeHead(404, { 'Content-Type': 'text/html' });
            res.end(notFoundContent);
        }
    },

    async handleApi(req, res) {
        try {
            if (req.url === '/api/users') {
                const users = await User.findAll();
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify(users));
            }
            else if (req.url === '/api/forums') {
                const forums = await Forum.findAll();
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify(forums));
            }
            else if (req.url.match(/^\/api\/forums\/posts\/\d+$/)) {
                const forumId = req.url.split('/').pop();
                const posts = await Forum.findPostsById(forumId);
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify(posts));
            }
            else if (req.url.match(/^\/api\/forums\/\d+$/)) {
                const forumId = req.url.split('/').pop();
                const forum = await Forum.findById(forumId);
                
                if (!forum) {
                    res.writeHead(404, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Forum not found' }));
                    return;
                }
    
                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify(forum));
            } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'API endpoint not found' }));
            }
        } catch (error) {
            if (!res.headersSent) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Server error' }));
            }
        }
    },
 
    async handleForum(req, res) {
        try {
            const forumIdentifier = req.url.split('/forum/')[1];
            let forum;

            if (/^\d+$/.test(forumIdentifier)) {
                forum = await Forum.findById(forumIdentifier);
            } else {
                forum= await Forum.findByName(decodeURIComponent(forumIdentifier));
            }

            if (!forum) {
                
                const notFoundContent = await fs.readFile(
                    path.join(__dirname, '../../views/pages/404.html'), 
                    'utf8'
                );
                res.writeHead(404, { 'Content-Type': 'text/html' });
                res.end(notFoundContent);
                return;
            }

            const posts = await Forum.findPostsById(forum.forum_id);
            
            const template = await templateService.readTemplateContent('forumTemplate');
            const processedTemplate = template
                .replace('FORUM NAME', forum.name)
                .replace('FORUM DESCRIPTION', forum.description);

            const mainTemplate = templateService.getTemplateHTML();

            const fullPage = mainTemplate.replace(`,{{content}}`, processedForumContent);

            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(processedTemplate);

        } catch (error) {
            console.error('Error handling forum request:', error);
            res.writeHead(500, { 'Content-Type': 'text/html' });
            res.end('Internal Server Error');
        }
    },

    async handleTemplate(req, res) {
        try {
            const templateName = req.url.split('/templates/')[1];
            console.log('Loading template:', templateName);
            const content = await fs.readFile(
                path.join(__dirname, '../../views/templates', `${templateName}.html`),
                'utf8'
            );
            
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(content);
        } catch (err) {
            console.error('Error loading template:', err);
            res.writeHead(404);
            res.end('Template not found');
        }
    }
};

module.exports = getHandlers;
=== ./controllers/handlers/index.js ===

/**
 * controllers/handlers/index.js
 * Registry of HTTP method handlers
 */

const getHandlers = require('./getHandlers');
const postHandlers = require('./postHandlers');
const putHandlers = require('./putHandlers');

// this is the handlers that is references in requestConroller
module.exports = {
    GET: getHandlers,
    POST: postHandlers,
    PUT: putHandlers
};
=== ./controllers/handlers/postHandlers.js ===

/**
 * controllers/handlers/postHandlers.js
 * Handles all POST requests with separate handlers for different endpoints
 */

const { pool } = require('../../config/database');

const User = require('../../models/User');
const Forum = require('../../models/Forum');

// Helper to parse request body
const parseBody = (req) => {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                resolve(JSON.parse(body));
            } catch (error) {
                reject(new Error('Invalid JSON'));
            }
        });
    });
};

const postHandlers = {
    // User-related handlers
    async handleCreateUser(req, res) {
        try {
            const userData = await parseBody(req);
            const newUser = await User.create(userData);
            
            res.writeHead(200, { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify({ 
                message: 'User created successfully',
                userId: newUser.insertId 
            }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Error creating user' }));
        }
    },
    
    async handleApi(req, res) {
        try {
            // Define API routes
            const routes = {
                '/api/users/create': this.handleCreateUser,
                '/api/forums/posts/create': this.handleCreateForumPost,
                '/api/forums/create': this.handleCreateForum  // Add this line
            };

            const handler = routes[req.url];
            if (handler) {
                await handler.call(this, req, res);
            } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'API endpoint not found' }));
            }
        } catch (error) {
            console.error('Error in handleApi:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Internal server error' }));
        }
    },
    async handleCreateForumPost(req, res) {
        try {
            const postData = await parseBody(req);
            
            // Validate required fields
            if (!postData.title || !postData.content || !postData.forum_id || !postData.user_id) {
                res.writeHead(400, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({ 
                    error: 'Missing required fields',
                    required: ['title', 'content', 'forum_id', 'user_id']
                }));
                return;
            }

            const result = await Forum.createPost(postData);
            
            res.writeHead(201, { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify({
                success: true,
                message: 'Post created successfully',
                post: result
            }));
        } catch (error) {
            console.error('Error in handleCreateForumPost:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ 
                error: 'Failed to create post',
                message: error.message
            }));
        }
    },
    async handleLogin(req, res) {
        try {
            const userData = await parseBody(req);
            console.log('Login attempt for user:', userData.username); // Debug log
            
            // Validate input
            if (!userData.username || !userData.password) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Username and password are required' }));
                return;
            }

            try {
                // Use the pool directly since we're debugging
                const [rows] = await pool.query(
                    'SELECT user_id, username, email, role FROM users WHERE username = ? AND password_hash = ?',
                    [userData.username, userData.password]
                );
                
                console.log('Query result:', rows); // Debug log

                if (!rows || rows.length === 0) {
                    res.writeHead(401, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Invalid username or password' }));
                    return;
                }

                const user = rows[0];

                // Set session data
                req.session = req.session || {};
                req.session.user = {
                    id: user.user_id,
                    username: user.username,
                    email: user.email,
                    role: user.role
                };

                res.writeHead(200, { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({ 
                    success: true,
                    user: {
                        id: user.user_id,
                        username: user.username,
                        email: user.email,
                        role: user.role
                    }
                }));

            } catch (dbError) {
                console.error('Database error:', dbError);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Database error during login' }));
            }

        } catch (error) {
            console.error('Login error:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Login failed', details: error.message }));
        }
    },

    async handleLogout(req, res) {
        try {
            req.session.destroy(err => {
                if (err) {
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Logout failed' }));
                    return;
                }
    
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true }));
            });
        } catch (error) {
            console.error('Logout error:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Logout failed' }));
        }
    },

    async handleCreateForum(req, res) {
        try {
            const forumData = await parseBody(req);
            
            if (!forumData.name || !forumData.description) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Name and description are required' }));
                return;
            }
    
            const newForum = await Forum.create(forumData);
            
            res.writeHead(201, { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify({
                success: true,
                forum: newForum
            }));
        } catch (error) {
            console.error('Error creating forum:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Failed to create forum' }));
        }
    }

};

module.exports = postHandlers;
=== ./controllers/handlers/putHandlers.js ===


const { pool } = require('../../config/database');

const User = require('../../models/User');
const Forum = require('../../models/Forum');


const parseBody = (req) => {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                resolve(JSON.parse(body));
            } catch (error) {
                reject(new Error('Invalid JSON'));
            }
        });
    });
};

const updateHandlers = {
    async handlePostReaction(req, res) {
        try {
            const data = await parseBody(req);
            const { post_id, isLike } = data;

            if (!post_id) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Post ID is required'}));
                return;
            }

            const updatedPost = await Forum.likePost(post_id, isLike);

            res.writeHead(200, {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify(updatedPost));
        } catch (error) {
            console.error('Error handling post reaction:', error);
            res.writehead(500, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({ error: 'Failed to update post reaction'}));
        }
    }
};




module.exports = updateHandlers;
=== ./controllers/requestController.js ===

// controllers/requestController.js
const handlers = require('./handlers');

// Route definitions mapping URLs to handler functions
const routes = {
    GET: {
        static: {
            pattern: /\.(css|js|png|jpg|gif|ico)$/,
            handler: 'handleStaticFile'
        },
        partial: {
            pattern: /^\/partial\//,
            handler: 'handlePartial'
        },
        api: {
            pattern: /^\/api\//,
            handler: 'handleApi'
        },
        template: {
            pattern: /^\/templates\//,
            handler: 'handleTemplate'
        },
        forum: {
            pattern: /^\/forum\/([^/]+)$/,
            handler: 'handleForum'
        },
        // Add login page route
        login: {
            pattern: /^\/login$/,
            handler: 'handlePage'
        },
        // Default handler for pages
        default: 'handlePage'
    },
    POST: {
        // Add login endpoint
        login: {
            pattern: /^\/api\/users\/login$/,
            handler: 'handleLogin'
        },
        // Add logout endpoint
        logout: {
            pattern: /^\/api\/users\/logout$/,
            handler: 'handleLogout'
        },
        createPost: {
            pattern: /^\/api\/forums\/posts\/create$/,
            handler: 'handleCreateForumPost'
        },
        api: {
            pattern: /^\/api\//,
            handler: 'handleApi'
        },
        createForum: {
            pattern: /^\/api\/forums\/create$/,
            handler: 'handleApi'
        },
        default: null
    },
    PUT: {
        // Add this new route
        postReaction: {
            pattern: /^\/api\/posts\/react$/,
            handler: 'handlePostReaction'
        }
    }
};

// Add session checking middleware
function checkSession(req) {
    // Public paths that don't require authentication
    const publicPaths = ['/login', '/account', '/', '/css/', '/js/', '/api/users/login'];
    
    if (publicPaths.some(path => req.url.startsWith(path))) {
        return true;
    }

    // Check if user is logged in
    return req.session && req.session.user;
}

async function handleRequest(req, res) {
    console.log(`${req.method} request received for: ${req.url}`);

    try {
        // Check session for protected routes
        if (!checkSession(req)) {
            if (req.url.startsWith('/api/')) {
                // For API requests, return JSON error
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Unauthorized' }));
            } else {
                // For page requests, redirect to login
                res.writeHead(302, { Location: '/login' });
                res.end();
            }
            return;
        }

        // Get handlers for the HTTP method
        const methodHandlers = handlers[req.method];

        // No recognized handler
        if (!methodHandlers) {
            res.writeHead(405);
            res.end('Method Not Allowed');
            return;
        }

        // Find matching route handler
        const handlerName = findRoute(req.method, req.url);
        if (!handlerName) {
            res.writeHead(404);
            res.end('Not Found');
            return;
        }

        // Execute the handler
        const handler = methodHandlers[handlerName];
        await handler(req, res);

    } catch (error) {
        console.error('Request handling error:', error);
        res.writeHead(500);
        res.end('Internal Server Error');
    }
}

// Route matcher function (remains the same)
function findRoute(method, url) {
    const methodRoutes = routes[method];
    if (!methodRoutes) return null;

    // Check each defined route pattern
    for (const [key, route] of Object.entries(methodRoutes)) {
        if (key === 'default') continue;
        if (route.pattern.test(url)) {
            return route.handler;
        }
    }

    // Return default handler if no specific route matches
    return methodRoutes.default;
}

module.exports = { handleRequest };
=== ./models/Forum.js ===

// models/Forum.js

const db = require('../config/database');

class Forum {
    static async findAll() {
        try {
            console.log('Attempting to fetch all forums');
            const [rows] = await db.pool.query('SELECT forum_id, name, description FROM forums');
            console.log('Successfully fetched forums:', rows);
            return rows;
        } catch (error) {
            console.error('Database error in Forum.findAll:', error.message);
            throw new Error(`Database error in findAll: ${error.message}`);
        }
    }

    static async findById(id) {
        try {
            console.log('Attempting to fetch forum with id:', id);
            const [rows] = await db.pool.query(
                'SELECT forum_id, name, description FROM forums WHERE forum_id = ?', 
                [id]
            );
            console.log('Forum query result:', rows[0]);
            return rows[0];
        } catch (error) {
            console.error('Database error in Forum.findById:', error.message);
            throw new Error(`Database error in findById: ${error.message}`);
        }
    }

    static async findPostsById(id) {
        try {
            console.log('Attempting to fetch posts with forum id:', id);
            const [rows] = await db.pool.query('SELECT post_id, forum_id, title, content, created_at, likes, dislikes FROM posts WHERE forum_id = ? ORDER BY created_at DESC',
                [id]
            );
            return rows;
        } catch (error) {
            throw new Error(`Database error in findPostsById: ${error.message}`)
        }
    }

    static async findByName(name) {
        try {
            console.log('Attempting to fetch forum with name:', name);
            const [rows] = await db.pool.query(
                'SELECT forum_id, name, description FROM forums WHERE LOWER(name) = LOWER(?)', 
                [name.replace(/_/g, ' ')] // Replace underscores with spaces
            );
            console.log('Forum query result:', rows[0]);
            return rows[0];
        } catch (error) {
            console.error('Database error in Forum.findByName:', error.message);
            throw new Error(`Database error in findByName: ${error.message}`);
        }
    }

    static async createPost(postData) {
        try {
            // Remove post_id from the query since it's auto-incrementing
            const query = 'INSERT INTO posts (user_id, forum_id, title, content, created_at) VALUES (?, ?, ?, ?, NOW())';
            const values = [
                postData.user_id,
                postData.forum_id,
                postData.title,
                postData.content
            ];

            const [result] = await db.pool.query(query, values);
            return {
                success: true,
                post_id: result.insertId,
                ...postData,
                created_at: new Date()
            };
        } catch (error) {
            console.error('Database error in createPost:', error);
            throw new Error(`Database error in createPost: ${error.message}`);
        }
    }

    static async likePost(postId, isLike) {
        try {
            const connection = await db.pool.getConnection();
            await connection.beginTransaction();
    
            try {
                // First check if post exists
                const [post] = await connection.query(
                    'SELECT likes, dislikes FROM posts WHERE post_id = ?',
                    [postId]
                );
    
                if (!post || post.length === 0) {
                    throw new Error('Post not found');
                }
    
                // Update the appropriate counter
                let query;
                if (isLike) {
                    query = 'UPDATE posts SET likes = likes + 1 WHERE post_id = ?';
                } else {
                    query = 'UPDATE posts SET dislikes = dislikes + 1 WHERE post_id = ?';
                }
    
                await connection.query(query, [postId]);
                await connection.commit();
    
                // Get updated post data
                const [updatedPost] = await connection.query(
                    'SELECT post_id, likes, dislikes FROM posts WHERE post_id = ?',
                    [postId]
                );
    
                connection.release();
                return updatedPost[0];
    
            } catch (error) {
                await connection.rollback();
                connection.release();
                throw error;
            }
        } catch (error) {
            console.error('Database error in likePost:', error.message);
            throw new Error(`Database error in likePost: ${error.message}`);
        }
    }

    static async create(forumData) {
        try {
            console.log('Attempting to create new forum:', forumData);
            
            const [result] = await db.pool.query(
                'INSERT INTO forums (name, description) VALUES (?, ?)',
                [forumData.name, forumData.description]
            );
            
            // Fetch and return the newly created forum
            const [newForum] = await db.pool.query(
                'SELECT forum_id, name, description FROM forums WHERE forum_id = ?',
                [result.insertId]
            );
    
            console.log('Successfully created forum:', newForum[0]);
            return newForum[0];
        } catch (error) {
            console.error('Database error in Forum.create:', error.message);
            throw new Error(`Database error in create: ${error.message}`);
        }
    }
}

module.exports = Forum;
=== ./models/User.js ===

/**
 * models/User.js
 * Handles user-related database operations
 */

const db = require('../config/database');

class User {
    static async findAll() {
        try {
            console.log('Attempting to fetch all users');
            const [rows] = await db.pool.query('SELECT * FROM users');
            console.log('Successfully fetched users:', rows);
            return rows;
        } catch (error) {
            console.error('Database error in findAll:', error.message);
            // Re-throw the error with more details
            throw new Error(`Database error in findAll: ${error.message}`);
        }
    }

    static async create(userData) {
        const query = 'INSERT INTO users (username, password_hash, email, role) VALUES (?, ?, ?, ?)';
        const values = [
            userData.username,
            userData.password,
            userData.email,
            userData.role || 'owl'
        ];

        const [result] = await db.pool.query(query, values);
        return result;
    }
}

module.exports = User;
=== ./models/message.js ===


=== ./project_contents.txt ===


=== ./public/css/styles.css ===

/* Base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background-color: #f3f4f6;
    overflow-x: hidden; /* Prevent horizontal scroll */
}

/* Header */
.header {
    background-color: #003399;
    color: white;
    padding: 1rem;
}

.header .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1800px;
    margin: 0 auto;
    padding: 0 2rem;
    box-sizing: border-box; /* Added to prevent overflow */
}

.home-link {
    color: white;
    text-decoration: none;
}

.header nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 1rem;
}

.header nav a {
    color: white;
    text-decoration: none;
}

/* Main content */
.body {
    flex: 1;
    padding: 2rem;
    max-width: 1800px;
    margin: 0 auto;
    width: 95%;
    box-sizing: border-box; /* Added to prevent overflow */
}

/* Forum section */
.forum-section {
    background-color: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    width: 100%;
    box-sizing: border-box; /* Added to prevent overflow */
}

/* Forum body - expanded layout */
.forum-body {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
    box-sizing: border-box; /* Added to prevent overflow */
}

/* Forum category styling */
.forum-category ul {
    list-style: none;
    padding: 0;
    margin: 0;
    width: 100%;
}

.forum-category li {
    margin-bottom: 1rem;
    padding: 1rem;
    background-color: #f8f9fa;
    border-radius: 0.5rem;
    transition: background-color 0.2s;
}

.forum-category li:hover {
    background-color: #e9ecef;
}

.forum-link {
    color: #003399;
    text-decoration: none;
    font-weight: bold;
    font-size: 1.1rem;
}

.forum-description {
    margin: 0.5rem 0 0 0;
    color: #666;
}

/* Forum posts section */
.gd-section {
    background-color: #D1F6FF;
    border-radius: 0.25rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    padding: 2rem;
    margin-bottom: 2rem;
    width: 100%;
    box-sizing: border-box; /* Added to prevent overflow */
    border-style: ridge;
    border-width: 3px;
}

/* Post items styling */
.post-item {
    background-color: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    width: 100%;
    box-sizing: border-box; /* Added to prevent overflow */
}

.post-item h3 {
    margin-top: 0;
    color: #003399;
}

.post-item p {
    color: #333;
    line-height: 1.6;
}

.post-item small {
    color: #666;
    display: block;
    margin-top: 1rem;
}

.post-item .main-post{
    list-style: none;
}

.post-item .sub-post{
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 1rem;
}

.post-item button {
    max-height: max-content;
}


/* Remove default list styling for posts */
.gd-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
    width: 100%;
    
}

/* Account form */
.account-form {
    max-width: 400px;
    margin: 20px auto;
    padding: 20px;
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    box-sizing: border-box; /* Added to prevent overflow */
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    color: #333;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.form-group input:focus {
    border-color: #003399;
    outline: none;
    box-shadow: 0 0 0 2px rgba(0, 51, 153, 0.1);
}

.submit-btn, .display-btn {
    background-color: #003399;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
    margin-top: 10px;
    font-size: 1rem;
    transition: background-color 0.2s;
}

.submit-btn:hover, .display-btn:hover {
    background-color: #002266;
}

/* Messages section */
.messages-section {
    background-color: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    width: 100%;
    box-sizing: border-box; /* Added to prevent overflow */
}

.messages-container {
    max-width: 800px;
    margin: 0 auto;
}

.message-list {
    padding: 1rem;
}

/* Footer */
footer {
    background-color: #003399;
    color: white;
    text-align: center;
    padding: 1rem;
    margin-top: auto;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .body {
        width: 90%;
        padding: 1rem;
    }
    
    .header .container {
        padding: 0 1rem;
    }
}

@media (max-width: 768px) {
    .body {
        width: 95%;
        padding: 0.5rem;
    }
    
    .gd-section {
        padding: 1rem;
    }
    
    .header .container {
        flex-direction: column;
        text-align: center;
    }
    
    .header nav ul {
        margin-top: 1rem;
        justify-content: center;
    }
    
    .account-form {
        margin: 10px;
        padding: 15px;
    }
}

/* Error messages */
.error-message {
    color: #dc3545;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 0.25rem;
    padding: 1rem;
    margin-bottom: 1rem;
}

/* Success messages */
.success-message {
    color: #28a745;
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    border-radius: 0.25rem;
    padding: 1rem;
    margin-bottom: 1rem;
}
=== ./public/js/api.js ===

/**
 * public/js/api.js
 * API handlers for different features
 */

// User-related API calls
const UserAPI = {
    async fetchUsers() {
        try {
            const response = await fetch('/api/users', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            
            const users = await response.json();
            this.displayUsers(users);
            return users;
        } catch (error) {
            console.error('Error fetching users:', error);
            throw error;
        }
    },

    async createAccount(form) {
        try {
            const formData = new FormData(form);
            const userData = {
                username: formData.get('username'),
                password: formData.get('password'),
                email: formData.get('email')
            };

            const response = await fetch('/api/users/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });

            if (!response.ok) throw new Error('Failed to create account');

            alert('Account created successfully!');
            form.reset();
        } catch (error) {
            alert('Error creating account: ' + error.message);
            throw error;
        }
    },

    displayUsers(users) {
        const contentDiv = document.querySelector('.forum-section');
        if (!contentDiv) return;

        contentDiv.innerHTML = '<h2>Users</h2><ul>';
        
        if (users.length === 0) {
            contentDiv.innerHTML += '<li>No users found</li>';
        } else {
            users.forEach(user => {
                contentDiv.innerHTML += `
                    <li>
                        <strong>User ID:</strong> ${user.user_id || 'N/A'} | 
                        <strong>Username:</strong> ${user.username || 'N/A'} | 
                        <strong>Email:</strong> ${user.email || 'N/A'}
                    </li>`;
            });
        }
        
        contentDiv.innerHTML += '</ul>';
    },

    async login(form) {
        try {
            const formData = new FormData(form);
            const userData = {
                username: formData.get('username'),
                password: formData.get('password')
            };

            const response = await fetch('/api/users/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });

            if (!response.ok) {
                throw new Error('Login failed');
            }

            const result = await response.json();
            
            // Store user info in localStorage for easy access
            localStorage.setItem('currentUser', JSON.stringify(result.user));
            
            // Redirect to forums after successful login
            window.location.href = '/forums';
        } catch (error) {
            alert('Login failed: ' + error.message);
            throw error;
        }
    },

    getCurrentUser() {
        const userString = localStorage.getItem('currentUser');
        return userString ? JSON.parse(userString) : null;
    },

    logout() {
        localStorage.removeItem('currentUser');
        fetch('/api/users/logout', { method: 'POST' })
            .then(() => {
                window.location.href = '/login';
            });
    }
};

// forum related API calls
const ForumAPI = {
    async fetchForums() {
        try {
            console.log('Fetching forums...');
            const response = await fetch('/api/forums', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Server error:', errorData);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error}`);
            }
            
            const forums = await response.json();
            console.log('Forums fetched successfully:', forums);
            return forums;
        } catch (error) {
            console.error('Error in fetchForums:', error);
            throw error;
        }
    },

    async fetchForumById(forumId) {
        try {
            console.log('Fetching forum:', forumId);
            const response = await fetch(`/api/forums/${forumId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Server error:', errorData);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error}`);
            }

            const forum = await response.json();
            console.log('Forum fetched successfully:', forum);
            return forum;
        } catch (error) {
            console.error('Error in fetchForumById:', error);
            throw error;
        }
    },

    
    async createPost(postData) {
        try {
            // Get current user from localStorage
            const currentUser = UserAPI.getCurrentUser();
            if (!currentUser) {
                throw new Error('User must be logged in to create posts');
            }

            // Add user_id to post data
            const postWithUser = {
                ...postData,
                user_id: currentUser.id
            };

            const response = await fetch('/api/forums/posts/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postWithUser)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to create post');
            }

            const result = await response.json();
            return result;
        } catch (error) {
            console.error('Error creating post:', error);
            throw error;
        }
    },


    async createForum(forumData) {
        try {
            console.log('Creating forum:', forumData);
            const response = await fetch('/api/forums/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(forumData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Server error:', errorData);
                throw new Error(errorData.error || 'Failed to create forum');
            }
            
            const result = await response.json();
            console.log('Forum created successfully:', result);
            return result;
        } catch (error) {
            console.error('Error in createForum:', error);
            throw error;
        }
    }
};

// post related API calls
const PostAPI = {
    async fetchPostsByForumId(forumId){
        try {
            console.log('Fetching posts from forum:', forumId);
            const response = await fetch(`/api/forums/posts/${forumId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Server error:', errorData);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error}`);
            }

            const posts = await response.json();
            this.displayPosts(posts);
            return posts;
        } catch (error) {
            console.error('Error in fetchPostsByForumId:', error);
            throw error;
        }
    },


    displayPosts(posts) {
        const contentDiv = document.querySelector('.gd-section');
        if (!contentDiv) return;

        contentDiv.innerHTML = '<h2>Posts</h2><ul>';
        
        if (posts.length === 0) {
            contentDiv.innerHTML += '<li>No posts found</li>';
        } else {
            posts.forEach(post => {
                contentDiv.innerHTML += `
                    <div class="post-item" data-post-id="${post.post_id}">
                        <li class="main-post">
                            <div class="post-header">
                                <h3>${post.title}</h3>
                                <small>Posted by User ID: ${post.user_id}</small>
                            </div>
                            <p>${post.content}</p>
                        </li>
                        <li class="sub-post">
                            <button class="reaction-btn like-btn" data-type="like">Like</button>
                            <span class="likes-count">${post.likes || 0}</span>
                            <span class="dislikes-count">${post.dislikes || 0}</span>
                            <button class="reaction-btn dislike-btn" data-type="dislike">Dislike</button>
                            <small>Posted on: ${new Date(post.created_at).toLocaleDateString()}</small>
                        </li>
                    </div>`;
            });
        }
        
        contentDiv.innerHTML += '</ul>';
        this.attachReactionHandlers();
    },

    async likePost(postId, isLike) {
        try {
            console.log('Sending reaction:', { postId, isLike });  // Debug log
            
            const response = await fetch('/api/posts/react', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ post_id: postId, isLike })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to update post reaction');
            }

            const result = await response.json();
            return result;
        } catch (error) {
            console.error('Error updating post reaction:', error);
            throw error;
        }
    },

    attachReactionHandlers() {
        document.querySelectorAll('.reaction-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                try {
                    const postItem = e.target.closest('.post-item');
                    const postId = postItem.dataset.postId;
                    const isLike = e.target.dataset.type === 'like';
                    
                    // Disable the button during the request
                    button.disabled = true;
                    
                    // Update the post reaction
                    const updatedPost = await this.likePost(postId, isLike);
                    
                    // Update the UI with new counts
                    postItem.querySelector('.likes-count').textContent = updatedPost.likes;
                    postItem.querySelector('.dislikes-count').textContent = updatedPost.dislikes;
                } catch (error) {
                    console.error('Failed to update reaction:', error);
                    alert('Failed to update reaction. Please try again.');
                } finally {
                    button.disabled = false;
                }
            });
        });
    }
};

// Message-related API calls (placeholder for future)
const MessageAPI = {
    // Message methods will go here
};

// At the end of api.js, after all your API definitions
window.UserAPI = UserAPI;
window.ForumAPI = ForumAPI;
window.PostAPI = PostAPI;
window.MessageAPI = MessageAPI;
=== ./public/js/main.js ===

/**
 * public/js/main.js
 * Core application setup and page management
 */

// Main application controller
const App = {
    init() {
        this.initializeEvents();
        this.loadPartials().then(() => {
            this.setupNavigation();
            this.initializeCurrentPage();
        });
    },

    initializeEvents() {
        // Custom event for page changes
        document.addEventListener('pageLoaded', () => {
            this.initializeCurrentPage();
        });

        // Handle popstate for browser back/forward
        window.addEventListener('popstate', (event) => {
            this.loadPage(window.location.pathname, false);
        });
    },

    async loadPartials() {
        try {
            const headers = await this.loadPartial('header', 'header-container');
            const footers = await this.loadPartial('footer', 'footer-container');
            return Promise.all([headers, footers]);
        } catch (error) {
            console.error('Error loading partials:', error);
        }
    },

    loadPartial(partialName, containerId) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', `/partial/${partialName}`, true);
            
            xhr.onload = function() {
                if (xhr.status === 200) {
                    document.getElementById(containerId).innerHTML = xhr.responseText;
                    resolve();
                } else {
                    reject(new Error(`Failed to load ${partialName}`));
                }
            };
            
            xhr.onerror = () => reject(new Error('Network error'));
            xhr.send();
        });
    },

    setupNavigation() {
        document.addEventListener('click', (e) => {
            if (e.target.matches('nav a')) {
                e.preventDefault();
                const href = e.target.getAttribute('href');
                this.loadPage(href);
            }
        });
    },

    async loadPage(url, pushState = true) {
        try {
            const response = await fetch(url);
            const html = await response.text();
            
            const mainContent = document.querySelector('.body');
            mainContent.innerHTML = html;

            if (pushState) {
                history.pushState({}, '', url);
            }

            // Trigger page loaded event
            document.dispatchEvent(new CustomEvent('pageLoaded', {
                detail: { path: url }
            }));
        } catch (error) {
            console.error('Error loading page:', error);
        }
    },

    initializeCurrentPage() {
        // Initialize based on current page
        const path = window.location.pathname;
        
        //this.loadPartials();

        if (path.includes('/account')) {
            PageHandlers.initializeAccountPage();
        } else if (path.includes('/forums')) {
            PageHandlers.initializeForumPage();
        } else if (path.includes('/messages')) {
            PageHandlers.initializeMessagePage();
        }
    }
};

// Page-specific handlers
const PageHandlers = {
    initializeAccountPage() {
        console.log('Initializing account page');
        
        // Handle display users button
        const displayButton = document.getElementById('displaydata');
        if (displayButton) {
            displayButton.addEventListener('click', async () => {
                try {
                    await UserAPI.fetchUsers();
                } catch (error) {
                    console.error('Error fetching users:', error);
                }
            });
        }

        // Handle account creation form
        const createForm = document.getElementById('createAccountForm');
        if (createForm) {
            createForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                try {
                    await UserAPI.createAccount(e.target);
                } catch (error) {
                    console.error('Error creating account:', error);
                }
            });
        }
    },

    async initializeForumPage() {
        console.log('Initializing forum page');
    
        try {
            // Fetch all available forums from the server
            const forums = await ForumAPI.fetchForums();
            console.log('Fetched forums:', forums);
            
            // Find the forum list container in the DOM
            const forumList = document.querySelector('.forum-category ul');
            if (forumList) {
                // Create the HTML for each forum entry
                forumList.innerHTML = forums.map(forum => `
                    <li>
                        <a href="/forum/${forum.forum_id}" 
                           class="forum-link" 
                           data-forum-id="${forum.forum_id}"
                           data-forum-title="${forum.name}"
                           data-forum-description="${forum.description}">
                            ${forum.name}
                        </a>
                        <p class="forum-description">${forum.description}</p>
                    </li>
                `).join('');
                
                // Add click handlers for each forum link
                document.querySelectorAll('.forum-link').forEach(link => {
                    link.addEventListener('click', async (e) => {
                        e.preventDefault();
                        const forumId = e.target.dataset.forumId;
                        
                        try {
                            // Fetch both forum details and posts simultaneously
                            const [forum, posts] = await Promise.all([
                                ForumAPI.fetchForumById(forumId),
                                PostAPI.fetchPostsByForumId(forumId)
                            ]);
                            
                            // Get and process the forum template
                            const response = await fetch('/templates/forumTemplate');
                            let template = await response.text();
                            
                            // Replace placeholder text in the template
                            template = template
                                .replace('FORUM NAME', forum.name)
                                .replace('FORUM DESCRIPTION', forum.description);
                            
                            // Update the page content and URL
                            document.querySelector('.body').innerHTML = template;
                            history.pushState({}, '', `/forum/${forumId}`);
                            
                            // Display the forum's posts
                            PostAPI.displayPosts(posts);
                            
                        } catch (error) {
                            console.error('Error loading forum:', error);
                            alert('Failed to load forum. Please try again.');
                        }
                    });
                });
    
                // Add the CreatePostButton event listener using event delegation
                document.addEventListener('click', async (e) => {
                    if (e.target.id === 'CreatePostButton') {
                        // Prevent multiple forms from being created
                        if (document.querySelector('.post-form-container')) {
                            return;
                        }
    
                        // Create the post submission form HTML
                        const formHTML = `
                            <div class="post-form-container">
                                <div class="post-item">
                                    <h3>Create New Post</h3>
                                    <form id="createPostForm" class="post-form">
                                        <div class="form-group">
                                            <label for="postTitle">Title:</label>
                                            <input type="text" 
                                                   id="postTitle" 
                                                   name="title" 
                                                   required
                                                   class="form-control">
                                        </div>
                                        <div class="form-group">
                                            <label for="postContent">Content:</label>
                                            <textarea id="postContent" 
                                                      name="content" 
                                                      required
                                                      class="form-control"
                                                      rows="4"></textarea>
                                        </div>
                                        <div class="button-group">
                                            <button type="submit" class="submit-btn">Submit Post</button>
                                            <button type="button" class="display-btn" id="cancelPost">Cancel</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        `;
    
                        // Insert the form above the posts section
                        const gdSection = document.querySelector('.gd-section');
                        gdSection.insertAdjacentHTML('beforebegin', formHTML);
    
                        // Add cancel button functionality
                        document.getElementById('cancelPost').addEventListener('click', () => {
                            document.querySelector('.post-form-container').remove();
                        });
    
                        // Handle form submission
                        const createPostForm = document.getElementById('createPostForm');
                        createPostForm.addEventListener('submit', async (e) => {
                            e.preventDefault();
                            
                            // Get the submit button first
                            const submitButton = createPostForm.querySelector('button[type="submit"]');
                            const originalButtonText = submitButton.textContent; // Store the original text
                            
                            try {
                                // Get forum_id from URL
                                const pathParts = window.location.pathname.split('/');
                                const forum_id = parseInt(pathParts[pathParts.length - 1]);

                                // Prepare form data
                                const formData = {
                                    title: document.getElementById('postTitle').value,
                                    content: document.getElementById('postContent').value,
                                    forum_id: forum_id,
                                    user_id: 1  // This should come from your auth system
                                };

                                // Update button state
                                submitButton.textContent = 'Creating...';
                                submitButton.disabled = true;

                                // Submit the post
                                const result = await ForumAPI.createPost(formData);
                                
                                if (result.success) {
                                    const posts = await PostAPI.fetchPostsByForumId(forum_id);
                                    PostAPI.displayPosts(posts);
                                    document.querySelector('.post-form-container').remove();
                                }
                            } catch (error) {
                                console.error('Error submitting post:', error);
                                const errorDiv = document.createElement('div');
                                errorDiv.className = 'error-message';
                                errorDiv.textContent = 'Failed to create post. Please try again.';
                                createPostForm.insertAdjacentElement('afterbegin', errorDiv);
                            } finally {
                                // Reset button state using the stored original text
                                submitButton.textContent = originalButtonText;
                                submitButton.disabled = false;
                            }
                        });
                    }
                });
            }
            document.getElementById('CreateForumButton')?.addEventListener('click', () => {
                const forumFormHTML = `
                    <div class="forum-form-container">
                        <div class="post-item">
                            <h3>Create New Forum</h3>
                            <form id="createForumForm" class="forum-form">
                                <div class="form-group">
                                    <label for="forumName">Forum Name:</label>
                                    <input type="text" 
                                           id="forumName" 
                                           name="name" 
                                           required
                                           class="form-control">
                                </div>
                                <div class="form-group">
                                    <label for="forumDescription">Description:</label>
                                    <textarea id="forumDescription" 
                                            name="description" 
                                            required
                                            class="form-control"
                                            rows="4"></textarea>
                                </div>
                                <div class="button-group">
                                    <button type="submit" class="submit-btn">Create Forum</button>
                                    <button type="button" class="display-btn" id="cancelForum">Cancel</button>
                                </div>
                            </form>
                        </div>
                    </div>
                `;
            
                document.querySelector('.forum-section').insertAdjacentHTML('afterbegin', forumFormHTML);
            
                document.getElementById('cancelForum').addEventListener('click', () => {
                    document.querySelector('.forum-form-container').remove();
                });
            
                document.getElementById('createForumForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = {
                        name: document.getElementById('forumName').value,
                        description: document.getElementById('forumDescription').value
                    };
            
                    try {
                        await ForumAPI.createForum(formData);
                        document.querySelector('.forum-form-container').remove();
                        // Refresh the forums list
                        const forums = await ForumAPI.fetchForums();
                        // Update the UI with new forums
                        const forumList = document.querySelector('.forum-category ul');
                        if (forumList) {
                            forumList.innerHTML = forums.map(forum => `
                                <li>
                                    <a href="/forum/${forum.forum_id}" 
                                       class="forum-link" 
                                       data-forum-id="${forum.forum_id}">
                                        ${forum.name}
                                    </a>
                                    <p class="forum-description">${forum.description}</p>
                                </li>
                            `).join('');
                        }
                    } catch (error) {
                        console.error('Error creating forum:', error);
                        alert('Failed to create forum. Please try again.');
                    }
                });
            });
        } catch (error) {
            // Handle any errors that occur during forum page initialization
            console.error('Error initializing forum page:', error);
            const forumSection = document.querySelector('.forum-section');
            if (forumSection) {
                forumSection.innerHTML = `
                    <h2>Forums</h2>
                    <p class="error-message">Sorry, we couldn't load the forums. Please try again later.</p>
                `;
            }
        }
    },

    initializeMessagePage() {
        console.log('Initializing message page');
        // Message-specific initialization will go here
    }
};

// Start the application
document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
=== ./server.js ===

/**
 * server.js
 * Main server entry point. Initializes HTTP server and starts listening for requests.
 */

const http = require('http');
const express = require('express');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const app = require('./app');

const server = express();

server.use(cookieParser());
server.use(session({
    secret:'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: {
        maxAge: 24 * 60 * 60 * 1000
    }
}));

server.use((req, res) => {
    app(req,res);
});

const port = process.env.PORT || 80;

server.listen(port, () => {
    console.log(`Server running on port ${port}`);
    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`Server time: ${new Date().toISOString()}`);
});
=== ./services/authServices.js ===


=== ./services/templateService.js ===

/**
 * services/templateService.js
 * Handles HTML template loading and processing
 */

const fs = require('fs').promises;
const path = require('path');

class TemplateService {
    constructor() {
        this.viewsDir = path.join(__dirname, '../views');
        this.partialsDir = path.join(this.viewsDir, 'partials');
        this.pagesDir = path.join(this.viewsDir, 'pages');
        this.templatesDir = path.join(this.viewsDir, 'templates');  // Add this line
    }


    async readPartial(partialName) {
        return await fs.readFile(path.join(this.partialsDir, `${partialName}.html`), 'utf8');
    }

    async readPageContent(pageName) {
        return await fs.readFile(path.join(this.pagesDir, `${pageName}.html`), 'utf8');
    }

    async readTemplateContent(templateName) {
        return await fs.readFile(path.join(this.templatesDir, `${templateName}.html`), 'utf8');
    }

    getTemplateHTML() {
        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SCSU Student Forum</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <div id="header-container"></div>
    <div class="body">
        {{content}}
    </div>
    <div id="footer-container"></div>
    <script src="/js/main.js"></script>
    <script src="/js/api.js"></script>
</body>
</html>`;
    }
}

module.exports = new TemplateService();
=== ./utils/mimeTypes.js ===

// utils/mimeTypes.js - MIME type mapping

const mimeTypes = {
    '.html': 'text/html',
    '.css': 'text/css',
    '.js': 'text/javascript',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.gif': 'image/gif',
};

module.exports = mimeTypes;
=== ./utils/pathHandler.js ===

/**
 * utils/pathHandler.js
 * Handles path resolution and validation
 */
const path = require('path');

const pathHandler = {
    resolvePath(basePath, ...paths) {
        const fullPath = path.join(basePath, ...paths);
        // Security check to prevent directory traversal
        if (!fullPath.startsWith(basePath)) {
            throw new Error('Invalid path');
        }
        return fullPath;
    },

    getExtension(filepath) {
        return path.extname(filepath).toLowerCase();
    }
};

module.exports = pathHandler;
=== ./utils/responseHandler.js ===

/**
 * utils/responseHelper.js
 * Standardizes HTTP responses
 */
const responseHelper = {
    sendJson(res, data, status = 200) {
        res.writeHead(status, {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify(data));
    },

    sendError(res, error, status = 500) {
        res.writeHead(status, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            error: error.message || 'Internal Server Error',
            status
        }));
    },

    sendFile(res, content, contentType) {
        res.writeHead(200, { 'Content-Type': contentType });
        res.end(content);
    }
};

module.exports = responseHelper;
=== ./views/pages/404.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Page Not Found</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <div class="container">
        <h1>404 - Page Not Found</h1>
        <p>Oops! The page you're looking for doesn't exist.</p>
        <p><a href="/">Go back to homepage</a></p>
    </div>
</body>
</html>
=== ./views/pages/account.html ===

<section class="account-section">
    <h2>Account Settings</h2>
    <div class="account-form">
        <form id="createAccountForm">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required>
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>

            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>

            <button type="submit" class="submit-btn">Create Account</button>
        </form>
        
        <button id="displaydata" class="display-btn">Display Users</button>

        <div class="forum-section">Hello there</div>
    </div>
</section>
=== ./views/pages/forums.html ===

<section class="forum-section">
    <h2>Forums</h2>
    <button id="CreateForumButton" class="submit-btn">Create New Forum</button>
    <div class="forum-list">
        <div class="forum-category">
            <h3>Academic Discussions</h3>
            <ul>
                <!-- Forums will be loaded here -->
            </ul>
        </div>
    </div>
</section>
=== ./views/pages/index.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SCSU Student Forum</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <div id="header-container"></div>

    <div class="body">
        <section class="forum-section">
            <h2>Welcome to the SCSU Forums!</h2>
        </section>
    </div>

    <div id="footer-container"></div>
    <script src="/js/main.js"></script>
    <script src="/js/api.js"></script>
</body>
</html>
=== ./views/pages/messages.html ===

<section class="messages-section">
    <h2>Messages</h2>
    <div class="messages-container">
        <div class="message-list">
            <p>Your messages will appear here</p>
        </div>
    </div>
</section>
=== ./views/pages/login.html ===

<div class="login-section">
    <h2>Login</h2>
    <div class="account-form">
        <form id="loginForm">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required>
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>

            <button type="submit" class="submit-btn">Login</button>
        </form>
        <div id="loginMessage"></div>
        <p>Don't have an account? <a href="/account">Create one</a></p>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('loginForm');
    const messageDiv = document.getElementById('loginMessage');

    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault(); // This prevents the default form submission

        try {
            const formData = new FormData(loginForm);
            const loginData = {
                username: formData.get('username'),
                password: formData.get('password')
            };

            const response = await fetch('/api/users/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(loginData)
            });

            const data = await response.json();

            if (response.ok) {
                // Store user info and redirect
                localStorage.setItem('currentUser', JSON.stringify(data.user));
                window.location.href = '/forums';
            } else {
                messageDiv.textContent = data.error || 'Login failed';
                messageDiv.style.color = 'red';
            }
        } catch (error) {
            messageDiv.textContent = 'Error connecting to server';
            messageDiv.style.color = 'red';
            console.error('Login error:', error);
        }
    });
});
</script>
=== ./views/partials/footer.html ===

<footer>
    <p>&copy; 2024 SCSU Student Forum</p>
</footer>
=== ./views/partials/header.html ===


<header class="header">
    <div class="container">
        <h1><a href="/" class="home-link">SCSU Student Forum</a></h1>
        <nav>
            <ul>
                <li><a href="/forums">Forums</a></li>
                <li><a href="/messages">Messages</a></li>
                <li><a href="/account">Account</a></li>
            </ul>
        </nav>
    </div>
</header>
=== ./views/templates/forumTemplate.html ===

<div class="forum-body">
    <h2 id="forum-title">FORUM NAME</h2>
    <h3 id="forum-description">FORUM DESCRIPTION</h3>
    <button id="CreatePostButton">Create Post</button>
    <section class="gd-section">
    </section>
</div>
=== ./package-lock.json ===

{
  "name": "SCSUForum",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "cookie-parser": "^1.4.7",
        "express-session": "^1.18.1"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-parser": {
      "version": "1.4.7",
      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.7.tgz",
      "integrity": "sha512-nGUvgXnotP3BsjiLX2ypbQnWoGUPIIfHQNZkkC668ntrzGWEZVW70HDEB1qnNGMicPje6EttlIgzo51YSwNQGw==",
      "license": "MIT",
      "dependencies": {
        "cookie": "0.7.2",
        "cookie-signature": "1.0.6"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/express-session": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.18.1.tgz",
      "integrity": "sha512-a5mtTqEaZvBCL9A9aqkrtfz+3SMDhOVUnjafjo+s7A9Txkq+SVX2DLvSp1Zrv4uCXa3lMSK3viWnh9Gg07PBUA==",
      "license": "MIT",
      "dependencies": {
        "cookie": "0.7.2",
        "cookie-signature": "1.0.7",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie-signature": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.7.tgz",
      "integrity": "sha512-NXdYc3dLr47pBkpUCHtKSwIOQXLVn8dZEuywboCOJY/osA0wFSLlSawr3KN8qXJEyX66FcONTH8EIlVuK0yyFA==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "license": "MIT",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    }
  }
}

=== ./README.md ===

# SCSU Student Forum

A web-based forum application for SCSU students built with Node.js and vanilla JavaScript.

## Project Overview

This project implements a student forum platform with the following features:
- User account management
- Forum discussions organized by topics
- Messaging system
- Responsive design with a clean user interface

## Project Structure

```
.
├── app.js                  # Application setup and main request handler
├── config/                 # Configuration files
│   └── database.js        # Database connection setup
├── controllers/           # Request handling logic
│   ├── handlers/         # HTTP method-specific handlers
│   └── requestController.js
├── models/               # Database models
│   ├── Forum.js         # Forum-related database operations
│   ├── Message.js       # Message-related database operations
│   └── User.js          # User-related database operations
├── public/              # Static assets
│   ├── css/            # Stylesheets
│   └── js/             # Client-side JavaScript
├── services/           # Business logic services
├── utils/              # Utility functions
├── views/              # HTML templates
│   ├── pages/          # Page templates
│   ├── partials/       # Reusable page components
│   └── templates/      # Dynamic content templates
└── server.js           # Server entry point
```

## Prerequisites

- Node.js (Latest LTS version recommended)
- MySQL Server
- npm (Node Package Manager)

## Database Setup

1. Create a MySQL database named `scsuforum`
2. The database requires the following tables:
   - users
   - forums
   - posts
   - messages

Example database schema:
```sql
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    role VARCHAR(20) DEFAULT 'owl'
);

CREATE TABLE forums (
    forum_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    description TEXT
);
```

## Installation

1. Clone the repository:
```bash
git clone [repository-url]
```

2. Install dependencies:
```bash
npm install
```

3. Configure the database connection in `config/database.js`

4. Start the server:
```bash
node server.js
```

The application will be available at `http://localhost:80`

## Key Components

### Backend

- **Server**: Uses Node.js native HTTP server
- **Database**: MySQL with connection pooling
- **Request Handling**: Custom routing system with method-based handlers
- **Template Service**: Custom HTML template processing

### Frontend

- **Templating**: Custom template system with partials support
- **API Integration**: Fetch-based API calls
- **Navigation**: History API-based navigation
- **Styling**: Custom CSS with responsive design

## API Endpoints

### Users
- `GET /api/users` - Retrieve all users
- `POST /api/users/create` - Create new user

### Forums
- `GET /api/forums` - Retrieve all forums
- `GET /api/forums/:id` - Retrieve specific forum
- `GET /api/forums/posts/:id` - Retrieve posts for a specific forum

## File Types

- `.js` - JavaScript source files
- `.html` - HTML templates and pages
- `.css` - Stylesheet files

## Security Features

- Path traversal prevention
- SQL injection protection through parameterized queries
- XSS protection through content sanitization
- Secure password hashing

## Development Guidelines

1. Follow the established folder structure
2. Use consistent error handling patterns
3. Document new API endpoints
4. Test all database operations
5. Follow existing naming conventions

## Error Handling

The application implements consistent error handling:
- Client-side errors are displayed to users
- Server-side errors are logged and generic messages returned
- Database errors are caught and handled appropriately

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## License

[Add appropriate license information]
=== ./to-do.txt ===

Imporant
- Add post id to the post to make it easier to find the post when liking / disliking
- need functioni to communicate with server to add likes

=== ./package.json ===

{
  "dependencies": {
    "cookie-parser": "^1.4.7",
    "express-session": "^1.18.1"
  }
}
